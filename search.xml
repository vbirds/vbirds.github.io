<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[UNIX进程环境 （一）]]></title>
      <url>http://yoursite.com/2016/06/04/UNIX%E8%BF%9B%E7%A8%8B%E7%8E%AF%E5%A2%83%20%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>当执行程序时，其mai函数是如何被调用的，命令行参数是如何传送给执行程序的；典型的存储器布局是什么样式；如何分配另外的存储空间；进程如何使用环境变量；进程终止的不同方式等。另外，还将说明函数以及它们与栈的交互作用。<br><a id="more"></a></p>
<h3 id="main函数"><a href="#main函数" class="headerlink" title="main函数"></a>main函数</h3><p>C程序总是从main函数开始执行。main函数的原型是：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int main(int a rg c, char *a rg v[ ] ) ;</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>内核启动C程序时，先调用一个特殊的例程，可执行程序文件将此起动例程指定为程序的起始地址。启动例程从内核里取命令行参数和环境变量值，然后为调用main函数作好安排。</p>
</blockquote>
<h3 id="进程的终止"><a href="#进程的终止" class="headerlink" title="进程的终止"></a>进程的终止</h3><p>有五种方式使进程终止：</p>
<ol>
<li>正常终止：<ul>
<li>从main函数返回</li>
<li>调用exit</li>
<li>调用_exit</li>
</ul>
</li>
<li>异常终止<ul>
<li>调用abort</li>
<li>由一个信号终止</li>
</ul>
</li>
</ol>
<h4 id="exit与-exit"><a href="#exit与-exit" class="headerlink" title="exit与_exit"></a>exit与_exit</h4><p>_exit属于系统调用，exit先进行一些清除处理，在调用_exit函数<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">exit</span><span class="params">(<span class="keyword">int</span> status)</span> </span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="keyword">void</span> _exit (<span class="keyword">int</span> status) ;</span><br></pre></td></tr></table></figure></p>
<p>调用exit和_exit结束后进程将返回状态码（status），如果未指定状态码或使用了无返回值类型的return语句，进程返回的状态码将是未定的。如下一段程序，它的返回值是未定的：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line">main ()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"hello\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="atexit函数"><a href="#atexit函数" class="headerlink" title="atexit函数"></a>atexit函数</h4><p>atexit函数可以注册在程序结束后的处理函数（最多32个），这些函数被称为终止处理函数（exit handle），当执行exit时exit将调用这些函数。atexit函数的定义：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">int atexit(void (*function)(void));</span><br></pre></td></tr></table></figure></p>
<p>当注册多个终止处理函数时，是按照栈的方式来执行函数（后进先出），程序将按照我们来注册2个处理函数，当程序结束时打印 “bye2\n” 和 “I am exited\n”：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">////exit(0)是c库函数 =  _exit(0); //系统调用</span></span><br><span class="line"><span class="comment">//\n能启动刷新缓冲区的作用</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bye1</span><span class="params">(<span class="keyword">void</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">true<span class="built_in">printf</span>(<span class="string">"I am exited\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bye2</span><span class="params">(<span class="keyword">void</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">true<span class="built_in">printf</span>(<span class="string">"bye2\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">trueatexit(bye1);</span><br><span class="line">trueatexit(bye2);</span><br><span class="line">true</span><br><span class="line">true<span class="built_in">printf</span>(<span class="string">"hello....\n"</span>);</span><br><span class="line">true<span class="comment">//abort();</span></span><br><span class="line">true</span><br><span class="line">truesleep(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">true<span class="comment">//exit(0); //是c库函数 =======其他操作。。。。在调用_exit</span></span><br><span class="line">true<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="命令行参数"><a href="#命令行参数" class="headerlink" title="命令行参数"></a>命令行参数</h3><p>在一个标准的main函数<code>int main(int argc, char *argv[])</code>，argc表示参数个数，<br>argv存放了参数，其中<code>argv[0]</code>存放的是程序文件名。输入的参数在执行程序时指定：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ ./echoarg arg1 TEST foo</span><br><span class="line">argv[0]: ./echoarg</span><br><span class="line">argv[1]: arg1</span><br><span class="line">argv[2]: TEST</span><br><span class="line">argv[3]: foo</span><br></pre></td></tr></table></figure></p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*****************************************************</span><br><span class="line">true&gt; File Name: echo.c</span><br><span class="line">true&gt; Author: </span><br><span class="line">true&gt; Mail: </span><br><span class="line"> *****************************************************/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; argc; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"argc=%d, argv=%s\n"</span>, i, argv[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="C程序的存储布局空间"><a href="#C程序的存储布局空间" class="headerlink" title="C程序的存储布局空间"></a>C程序的存储布局空间</h3><p>C程序由下列几部分组成：</p>
<table>
<thead>
<tr>
<th>type</th>
<th>information</th>
</tr>
</thead>
<tbody>
<tr>
<td>正文段</td>
<td>这是由C P U执行的机器指令部分</td>
</tr>
<tr>
<td>初始化数据段</td>
<td>通常将此段称为数据段，它包含了程序中需赋初值的变量。</td>
</tr>
<tr>
<td>非初始化数据段</td>
<td>通常将此段称为b s s段</td>
</tr>
<tr>
<td>栈</td>
<td>自动变量以及每次函数调用时所需保存的信息都存放在此段中。</td>
</tr>
<tr>
<td>堆</td>
<td>通常在堆中进行动态存储分配。</td>
</tr>
</tbody>
</table>
<p>通过 size（man size)命令可以查看这些信息：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ size /bin/sh</span><br><span class="line">   text	   data	    bss	    dec	    hex	filename</span><br><span class="line"> 107101	   2744	  10196	 120041	  1d4e9	/bin/sh</span><br></pre></td></tr></table></figure></p>
<p>第4和第5列是分别以十进制和十六进制表示的总长度。<br>以下是常见的C程序的存储布局空间图：<br><img src="http://7xsc1o.com1.z0.glb.clouddn.com/uninx/linux%E7%8E%AF%E5%A2%83%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8BC%E7%A8%8B%E5%BA%8F%E7%9A%84%E5%AD%98%E5%82%A8%E5%B8%83%E5%B1%80%E7%A9%BA%E9%97%B4.PNG" alt="enter description here"></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>[1] <a href="">Uninx环境高级编程</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[STL学习（一）简介]]></title>
      <url>http://yoursite.com/2016/05/24/STL%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89%E7%AE%80%E4%BB%8B/</url>
      <content type="html"><![CDATA[<p><strong>STL（Standard TemplateLibrary）</strong>，即标准模板库，是一个具有工业强度的，高效的C++程序库。它被容纳于C++标准程序库（C++ Standard Library）中，是ANSI/ISOC++标准中最新的也是极具革命性的一部分。该库包含了诸多在计算机科学领域里所常用的基本数据结构和基本算法。为广大C++程序员们提供了一个可扩展的应用框架，高度体现了软件的可复用性。<br><a id="more"></a></p>
<h3 id="STL历史"><a href="#STL历史" class="headerlink" title="STL历史"></a>STL历史</h3><p><strong><em>STL = Standard Template Library</em></strong>，标准模板库，惠普实验室开发的一系列软件的统称。它是由<strong>Alexander Stepanov、Meng Lee</strong>和<strong>David R Musser</strong>在惠普实验室工作时所开发出来的。从根本上说，STL是一些“容器”的集合，这些“容器”有list,vector,set,map等，STL也是算法和其他一些组件的集合。这里的“容器”和算法的集合指的是世界上很多聪明人很多年的杰作。STL的目的是<strong>标准化组件</strong>，这样就不用重新开发，可以使用现成的组件。STL现在是C++的一部分，因此不用额外安装什么。<br>STL运用模板技术把数据结构与算法分离，再用迭代器将两者粘结在一起。<br>STL的组成主要有六个部分:</p>
<ol>
<li>容器</li>
<li>算法</li>
<li>迭代器</li>
<li>函数对象</li>
<li>适配器</li>
<li>内存分配器</li>
</ol>
<p>六者间的关系如下图（来自侯姐《STL源码剖析》一书 p6）：<br><img src="http://7xsc1o.com1.z0.glb.clouddn.com/c/c++stl.jpg" alt="STL关系图"></p>
<h3 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h3><p>STL的容器可以分为两大类，顺序性容器和关联性容器。<br>顺序性容器包括：</p>
<table>
<thead>
<tr>
<th>容器</th>
<th>特性</th>
</tr>
</thead>
<tbody>
<tr>
<td>vector</td>
<td>从后面快速的插入与删除，直接访问任何元素</td>
</tr>
<tr>
<td>deque</td>
<td>从前面或后面快速的插入与删除，直接访问任何元素</td>
</tr>
<tr>
<td>list</td>
<td>双链表，从任何地方快速插入与删除</td>
</tr>
</tbody>
</table>
<p>关联性容器包括：</p>
<table>
<thead>
<tr>
<th>容器</th>
<th>特性</th>
</tr>
</thead>
<tbody>
<tr>
<td>set</td>
<td>快速查找，不允许重复值</td>
</tr>
<tr>
<td>multiset</td>
<td>快速查找，允许重复值</td>
</tr>
<tr>
<td>map</td>
<td>一对多映射，基于关键字快速查找，不允许重复值</td>
</tr>
<tr>
<td>multimap</td>
<td>一对多映射，基于关键字快速查找，允许重复值</td>
</tr>
</tbody>
</table>
<h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><p><strong>STL</strong>供包括了近几百个算法，也都是计算机科学中的算法。比如算法for_each将为指定序列中的每一个元素调用指定的函数，<strong>stable_sort</strong>以你所指定的规则对序列进行稳定性排序等等。这样一来，只要我们熟悉了<strong>STL</strong>之后，许多代码可以被大大的化简，只需要通过调用一两个算法模板，就可以完成所需要的功能并大大地提升效率。<br>算法部分主要由头文件<code>&lt;algorithm&gt;</code>，<code>&lt;numeric&gt;</code>和<code>&lt;functional&gt;</code>组成。<algorithm>是所有STL头文件中最大的一个（尽管它很好理解），它是由一大堆模版函数组成的，可以认为每个函数在很大程度上都是独立的，其中常用到的功能范围涉及到比较、交换、查找、遍历操作、复制、修改、移除、反转、排序、合并等等。<code>&lt;numeric&gt;</code>体积很小，只包括几个在序列上面进行简单数学运算的模板函数，包括加法和乘法在序列上的一些操作。<code>&lt;functional&gt;</code>中则定义了一些模板类，用以声明函数对象。</algorithm></p>
<h3 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h3><p>迭代器在STL中用来将算法和容器联系起来，起着一种黏和剂的作用。几乎STL提供的所有算法都是通过迭代器存取元素序列进行工作的，每一个容器都定义了其本身所专有的迭代器，用以存取容器中的元素。<br>迭代器部分主要由头文件<code>&lt;utility&gt;</code>,<code>&lt;iterator&gt;</code>和<code>&lt;memory&gt;</code>组成。<code>&lt;utility&gt;</code>是一个很小的头文件，它包括了贯穿使用在STL中的几个模板的声明，<code>&lt;iterator&gt;</code>中提供了迭代器使用的许多方法，而对于<code>&lt;memory&gt;</code>的描述则十分的困难，它以不同寻常的方式为容器中的元素分配存储空间，同时也为某些算法执行期间产生的临时对象提供机制,<code>&lt;memory&gt;</code>中的主要部分是模板类<code>allocator</code>，它负责产生所有容器中的默认分配器。</p>
<h3 id="函数对象"><a href="#函数对象" class="headerlink" title="函数对象"></a>函数对象</h3><p>函数对象的行为类似函数，但可作为算法的某种策略（policy）。从实现的角度看，函数对象是一种重载了operator()（函数调用操作符）的class或class template。</p>
<h3 id="适配器"><a href="#适配器" class="headerlink" title="适配器"></a>适配器</h3><p>适配器是一种用来修饰容器或函数对象或迭代器的东西。例如，STL 提供    <code>queue</code>和<code>stack</code>，虽然他们看似容器，但其实只能算是一种容器适配器，因为他们的底层实现完全借助于deque，所有的操作都由底层deque提供。改变<code>functor/container/iterator</code>的接口者称为<code>functor/container/iterator adaptor</code>。</p>
<h3 id="内存分配器"><a href="#内存分配器" class="headerlink" title="内存分配器"></a>内存分配器</h3><p>负责空间配置与管理，本质是实现动态空间配置、空间管理、空间释放的一系列class template。它是容器的底层接口，实际使用STL的用户是看不到Allocation的。</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>[1] <a href="http://baike.baidu.com/subview/332356/10428592.htm" target="_blank" rel="external">百度百科：STL</a><br>[2] <a href="http://zh.wikipedia.org/wiki/%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF%E5%BA%93" target="_blank" rel="external">Wiki：标准模板库</a> </p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[位运算]]></title>
      <url>http://yoursite.com/2016/05/24/%E4%BD%8D%E8%BF%90%E7%AE%97/</url>
      <content type="html"><![CDATA[<p>二进制是计算技术中广泛采用的一种数制。二进制数据是用0和1两个数码来表示的数。它的基数为2，进位规则是“逢二进一”，借位规则是“借一当二”，由18世纪德国数理哲学大师莱布尼兹发现。当前的计算机系统使用的基本上是二进制系统，数据在计算机中主要是以补码的形式存储的。<br><a id="more"></a></p>
<h2 id="二进制的操作"><a href="#二进制的操作" class="headerlink" title="二进制的操作"></a>二进制的操作</h2><h3 id="1-位移"><a href="#1-位移" class="headerlink" title="1 位移"></a>1 位移</h3><p>一个 <code>unsigned char</code> 由一个字节构成。<br><strong>左移运算</strong>：<code>X&lt;&lt;Y</code>：</p>
<blockquote>
<p>将x左移y位，将x最左边的y位丢弃，在右边补y个0。</p>
</blockquote>
<p><strong>右移运算</strong>：<code>X&gt;&gt;Y</code>：</p>
<blockquote>
<p>将x右移y位，这需要区分x是有符号数还是无符号数。在x是无符号数时，只需将x的最右边的y位丢弃，在左边补上y个0。在x是有符号数时，又分为x是正数还是负数。正数时，同无符号数的处理相同；负数时，将将x的最右边的y位丢弃，在左边补上y个1。</p>
</blockquote>
<p><strong>左移1位</strong>：相当于 乘2<br><strong>右移1位</strong>：相当于 除2<br>要注意可能 溢出 的情况</p>
<p>优点：移位运算 比 乘除运算 速度更快 更省CPU<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">// 0001 0011</span></span><br><span class="line">    <span class="comment">// 1    3</span></span><br><span class="line">    <span class="comment">// 0x13</span></span><br><span class="line">    <span class="comment">// 16 * 1 + 2 + 1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> a = <span class="number">0x13</span>; <span class="comment">// 0001 0011</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> b = a &lt;&lt; <span class="number">2</span>; <span class="comment">// 0100 1100</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> c = b &gt;&gt; <span class="number">2</span>; <span class="comment">// 0001 0011</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="2-按位与运算符-amp"><a href="#2-按位与运算符-amp" class="headerlink" title="2 按位与运算符 &amp;"></a>2 按位与运算符 &amp;</h3><blockquote>
<p>按位与运算符”&amp;”是双目运算符。 其功能是参与运算的两数各对应的二进位相与。只有对应的两个二进位均为1时，结果位才为1，否则为0。参与运算的数以补码方式出现。</p>
</blockquote>
<p>例如：<code>9&amp;5</code>可写算式如下： <code>00001001 &amp; 00000101 = 00000001</code>可见<code>9&amp;5=1</code>。 按位与运算<strong>通常用来对某些位清0或保留某些位</strong>。例如把a 的高八位清 0 ， 保留低八位， 可作 <code>a&amp;255</code> 运算 ( 255 的二进制数为11111111)。<br><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">1 </span>&amp; <span class="number">1</span> = <span class="number">1</span>， <span class="number">1</span> | <span class="number">1</span> = <span class="number">1</span>， <span class="number">1</span> ^ <span class="number">1</span> = <span class="number">0</span></span><br><span class="line"><span class="symbol">1 </span>&amp; <span class="number">0</span> = <span class="number">0</span>， <span class="number">1</span> | <span class="number">0</span> = <span class="number">1</span>， <span class="number">1</span> ^ <span class="number">0</span> = <span class="number">1</span></span><br><span class="line"><span class="symbol">0 </span>&amp; <span class="number">1</span> = <span class="number">0</span>， <span class="number">0</span> | <span class="number">1</span> = <span class="number">1</span>， <span class="number">0</span> ^ <span class="number">1</span> = <span class="number">1</span></span><br><span class="line"><span class="symbol">0 </span>&amp; <span class="number">0</span> = <span class="number">0</span>， <span class="number">0</span> | <span class="number">0</span> = <span class="number">0</span>， <span class="number">0</span> ^ <span class="number">0</span> = <span class="number">0</span></span><br></pre></td></tr></table></figure></p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    inta=<span class="number">9</span>,b=<span class="number">5</span>,c;</span><br><span class="line">    c=a&amp;b;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"a=%d\nb=%d\nc=%d\n"</span>,a,b,c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-按位或运算符"><a href="#3-按位或运算符" class="headerlink" title="3 按位或运算符 |"></a>3 按位或运算符 |</h3><blockquote>
<p>按位或运算符“|”是双目运算符。其功能是参与运算的两数各对应的二进位相或。只要对应的二个二进位有一个为1时，结果位就为1。</p>
</blockquote>
<p><strong>按位或运算常用来对一个数据的某些位定值为1</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">240</span> <span class="comment">// 1111 0000</span></span><br><span class="line">    <span class="keyword">int</span> pnum = <span class="number">15</span> <span class="comment">// 0000 1111</span></span><br><span class="line">    <span class="keyword">int</span> temp = <span class="number">0</span>; <span class="comment">// 0000 0000</span></span><br><span class="line">    </span><br><span class="line">    temp = num | pnum <span class="comment">//1111 1111 (255)</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, temp); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="4-异或运算符"><a href="#4-异或运算符" class="headerlink" title="4 异或运算符 ^"></a>4 异或运算符 ^</h3><blockquote>
<p>　异或运算符 <code>^</code> 也称 <code>XOR</code> 运算符。它的规则是若参加运算的两个二进位同号，则结果为0，异号则为1。即 <code>0^0=0; 0^1=1; 1^0=1;1^1=0</code>。</p>
</blockquote>
<ol>
<li><p>使特定位翻转<br>假设有 <code>01111010</code>，想使其低4 位翻转，即 1 变为 0，0 变为 1，可以将它与 <code>00001111</code>进行 <code>^</code> 运算</p>
<figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">01111010</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">00001111 </span>^</span><br><span class="line"></span><br><span class="line"><span class="number">01110101</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>与 0 相 ^ 保留原值</p>
<figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">00001010</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">00000000 </span>^</span><br><span class="line"></span><br><span class="line"><span class="number">00001010</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>交换两个值，不用临时变量<br>假如 a = 3, b = 4。想将 a 和 b的值互换，可以用以下赋值语句实现：</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">a</span> = a ^ b;</span><br><span class="line"></span><br><span class="line"><span class="attr">b</span> = b ^ a;</span><br><span class="line"></span><br><span class="line"><span class="attr">a</span> = a ^ b;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="5-按位取反"><a href="#5-按位取反" class="headerlink" title="5 按位取反 ~"></a>5 按位取反 ~</h3><blockquote>
<p>  按位取反运算是单目运算，用来求一个位串信息按位的反，即哪些为0的位，结果是1，而哪些为1的位，结果是0。例如, <code>~7</code>的结果为<code>0xfff8</code>。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line">main()</span><br><span class="line">&#123;</span><br><span class="line"> <span class="keyword">int</span> a=<span class="number">077</span>;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">"%d"</span>,~a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
</blockquote>
<h3 id="6-计算技巧"><a href="#6-计算技巧" class="headerlink" title="6 计算技巧"></a>6 计算技巧</h3><h4 id="1-检查state的第pos位是否为1"><a href="#1-检查state的第pos位是否为1" class="headerlink" title="1 检查state的第pos位是否为1"></a>1 检查state的第pos位是否为1</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bitCheck</span><span class="params">(<span class="keyword">int</span> state, <span class="keyword">int</span> pos)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> state &amp; <span class="number">1</span>&lt;&lt; pos - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="2-将state的第pos位的值设为1"><a href="#2-将state的第pos位的值设为1" class="headerlink" title="2 将state的第pos位的值设为1"></a>2 将state的第pos位的值设为1</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bitAdd</span><span class="params">(<span class="keyword">int</span> state, <span class="keyword">int</span> pos)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> state | (<span class="number">1</span> &lt;&lt; (pos - <span class="number">1</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="3-将state的第pos位的值设为0"><a href="#3-将state的第pos位的值设为0" class="headerlink" title="3 将state的第pos位的值设为0"></a>3 将state的第pos位的值设为0</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bitDel</span><span class="params">(<span class="keyword">int</span> state, <span class="keyword">int</span> pos)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> state &amp; (~(<span class="number">1</span> &lt;&lt; (pos - <span class="number">1</span>)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="4-计算一个数的二进制中1的个数"><a href="#4-计算一个数的二进制中1的个数" class="headerlink" title="4 计算一个数的二进制中1的个数"></a>4 计算一个数的二进制中1的个数</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">countof1</span><span class="params">(<span class="keyword">int</span> num)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> flag = <span class="number">1</span> <span class="comment">//0x01  0000 0001</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (flag)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (num &amp; flag)</span><br><span class="line">        &#123;</span><br><span class="line">            ++count;</span><br><span class="line">        &#125;</span><br><span class="line">        flag = flag &lt;&lt; <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="5-判断一个数是否是2的n次方"><a href="#5-判断一个数是否是2的n次方" class="headerlink" title="5 判断一个数是否是2的n次方"></a>5 判断一个数是否是2的n次方</h4><p>一个数是2的n次方，则这个数的最高位是1，其余位为0。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span><br><span class="line">    判断一个数是否为2的n次方（一个数为2的n次方，则最高位为1，其余位为0） </span><br><span class="line">*/</span>  </span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">is2Power</span><span class="params">(<span class="keyword">int</span> num)</span>  </span><br><span class="line"></span>&#123;  </span><br><span class="line">    <span class="keyword">bool</span> flag = <span class="literal">true</span>;  </span><br><span class="line">  </span><br><span class="line">    num = num &amp; (num - <span class="number">1</span>); <span class="comment">//计算num和num - 1的与的结果  </span></span><br><span class="line">    <span class="keyword">if</span>(num) <span class="comment">//如果结果为0，则不是2的n次方  </span></span><br><span class="line">    &#123;  </span><br><span class="line">        flag = <span class="literal">false</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">      </span><br><span class="line">    <span class="keyword">return</span> flag;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="6-整数n经过多少步可以变为整数m"><a href="#6-整数n经过多少步可以变为整数m" class="headerlink" title="6 整数n经过多少步可以变为整数m"></a>6 整数n经过多少步可以变为整数m</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span><br><span class="line">    求解n变化为m，需要进行的操作步数 </span><br><span class="line">*/</span>  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">countChange</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span>  </span><br><span class="line"></span>&#123;  </span><br><span class="line">    n = n ^ m; <span class="comment">//求n和m的异或,再计算结果中1的个数  </span></span><br><span class="line">    <span class="keyword">return</span> countOf1_2(n);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="7-获得最大的int值"><a href="#7-获得最大的int值" class="headerlink" title="7 获得最大的int值"></a>7 获得最大的int值</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span><br><span class="line">    获取最大的int </span><br><span class="line">    得到结果：2147483647 </span><br><span class="line">*/</span>  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getMaxInt</span><span class="params">()</span>  </span><br><span class="line"></span>&#123;  </span><br><span class="line">    <span class="keyword">return</span> (<span class="number">1</span> &lt;&lt; <span class="number">31</span>) - <span class="number">1</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="8-获得最小的int值"><a href="#8-获得最小的int值" class="headerlink" title="8 获得最小的int值"></a>8 获得最小的int值</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span><br><span class="line">    求最小int </span><br><span class="line">    得到结果：-2147483648 </span><br><span class="line">*/</span>  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getMinInt</span><span class="params">()</span>  </span><br><span class="line"></span>&#123;  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> &lt;&lt; <span class="number">31</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="9-判断一个数的奇偶性"><a href="#9-判断一个数的奇偶性" class="headerlink" title="9 判断一个数的奇偶性"></a>9 判断一个数的奇偶性</h4><p>判断奇偶性，实质是判断最后一位是否是1.<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span><br><span class="line">    判断一个数的奇偶性.返回1，为奇数;返回0，为偶数 </span><br><span class="line">*/</span>  </span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isOdd</span><span class="params">(<span class="keyword">int</span> num)</span>  </span><br><span class="line"></span>&#123;  </span><br><span class="line">    <span class="keyword">return</span> num &amp; <span class="number">1</span> == <span class="number">1</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="10-求一个数的绝对值"><a href="#10-求一个数的绝对值" class="headerlink" title="10 求一个数的绝对值"></a>10 求一个数的绝对值</h4><p>下面的方法实现的基础是将n右移31位，可以获得n的符号。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span><br><span class="line">    取绝对值 </span><br><span class="line">    n右移31位，可以获得n的符号。若n为正数，得到0；若n为负数，得到 -1 </span><br><span class="line">     </span><br><span class="line">*/</span>  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">myAbs</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;  </span><br><span class="line">    <span class="keyword">return</span> (n ^ n &gt;&gt; <span class="number">31</span>) - (n &gt;&gt; <span class="number">31</span>);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="11-求两个数的平均值"><a href="#11-求两个数的平均值" class="headerlink" title="11 求两个数的平均值"></a>11 求两个数的平均值</h4><p>第一种方法较为普遍且简单，不多说了。第二种方法，需要知道的是，<code>( m ^ n ) &gt;&gt; 1</code>得到的结果是m和n其中一个数的有些位为1的值的一半，<code>m &amp; n</code>得到的结果是m 和n都为1的那些位，两个结果相加得到m和n的平均数。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span><br><span class="line">    求m和n的平均数 </span><br><span class="line">*/</span>  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getAverage</span><span class="params">(<span class="keyword">int</span> m,<span class="keyword">int</span> n)</span></span>&#123;  </span><br><span class="line">    <span class="keyword">return</span> (m + n) &gt;&gt; <span class="number">1</span>;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/* </span><br><span class="line">    求m和n的平均数 </span><br><span class="line">    (m ^ n) &gt;&gt; 1 -&gt; 获得m和n两个数中一个数的某些位为1的一半 </span><br><span class="line">    m &amp; n -&gt; 获得m和n两个数中都为1的某些位 </span><br><span class="line">*/</span>  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getAverage_2</span><span class="params">(<span class="keyword">int</span> m,<span class="keyword">int</span> n)</span></span>&#123;  </span><br><span class="line">    <span class="keyword">return</span> ((m ^ n) &gt;&gt; <span class="number">1</span>) + (m &amp; n);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[python   批量下载图片]]></title>
      <url>http://yoursite.com/2016/04/13/python-%E6%89%B9%E9%87%8F%E4%B8%8B%E8%BD%BD%E5%9B%BE%E7%89%87/</url>
      <content type="html"><![CDATA[<p>首先我们先分析这个程序，这个程序的功能从网页批量下载图片，既然是网页下载，无非有这三个步骤：</p>
<ol>
<li>先得到网页。得到网页，以便程序分析网页中的图片连接。</li>
<li>解析网页。分析网页，从中取出所有图片连接。</li>
<li>下载。通过得到的图片连接下载图片。</li>
</ol>
<p>分析完成后我们开始编写程序：<br><a id="more"></a></p>
<h4 id="先得到网页"><a href="#先得到网页" class="headerlink" title="先得到网页"></a>先得到网页</h4><p>python自带<code>urllib</code>库，利用这个库我们可以轻松的得到网页。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line">html = urllib.urlopen(<span class="string">"https://mm.taobao.com/1832304329.htm"</span>).read()</span><br></pre></td></tr></table></figure></p>
<p>这里有个要注意的地方:<code>编码问题</code> 我下的这个网页是<code>GBK</code>编码，所以要进行转换：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">html = html.decode(<span class="string">"GBK"</span>) <span class="comment"># decode 编码转换</span></span><br></pre></td></tr></table></figure></p>
<h4 id="解析网页"><a href="#解析网页" class="headerlink" title="解析网页"></a>解析网页</h4><p>接下来就是解析页面了，通过正则表达式可以很容易的到图片的连接，正则表达式在<code>re</code>库中我们导入它<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br></pre></td></tr></table></figure></p>
<p>编译正则表达式:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reg = re.compile(<span class="string">r'src="//(.*?)"/&gt;'</span>) <span class="comment"># 正则表达式 (编译正则表达式）</span></span><br></pre></td></tr></table></figure></p>
<p>解析网页：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">imgurl = re.findall(reg, html)</span><br></pre></td></tr></table></figure></p>
<p>这样我们将所有的图片连接地址保存在了<code>imgurl</code>中了。</p>
<h4 id="下载网页中的图片并保存"><a href="#下载网页中的图片并保存" class="headerlink" title="下载网页中的图片并保存"></a>下载网页中的图片并保存</h4><p>利用切片得到图片的格式，将图片保存。图片连接格式：<code>img.alicdn.com/imgextra/i4/1832304329/TB1.9G9LVXXXXXeaXXXXXXXXXXX_!!0-tstar.jpg&quot;</code></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> imgurl:</span><br><span class="line">    n += <span class="number">1</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"正在下载第%s张图片, 共%s张图片"</span> %(n, len(imgurl)) </span><br><span class="line">    urllib.urlretrieve(<span class="string">'http://%s'</span> %i, <span class="string">'%s.%s'</span> %(n, i[<span class="number">-3</span>:])) <span class="comment">#i[-3:]得到图片格式 并保存</span></span><br></pre></td></tr></table></figure>
<h4 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h4><p><img src="http://7xsc1o.com1.z0.glb.clouddn.com/pythonpython%E6%89%B9%E9%87%8F%E4%B8%8B%E8%BD%BD%E5%9B%BE%E7%89%87.png" alt="python批量下载图片"></p>
<h4 id="完整源码"><a href="#完整源码" class="headerlink" title="完整源码"></a>完整源码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">html = urllib.urlopen(<span class="string">"https://mm.taobao.com/1832304329.htm"</span>).read()</span><br><span class="line">html = html.decode(<span class="string">"GBK"</span>) <span class="comment"># decode and encode 学习  编码转换</span></span><br><span class="line"></span><br><span class="line">reg = re.compile(<span class="string">r'src="//(.*?)"/&gt;'</span>) <span class="comment"># 正则表达式 (编译正则表达式）</span></span><br><span class="line"></span><br><span class="line">imgurl = re.findall(reg, html)</span><br><span class="line"></span><br><span class="line">n = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> imgurl:</span><br><span class="line">    n += <span class="number">1</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"正在下载第%s张图片, 共%s张图片"</span> %(n, len(imgurl))</span><br><span class="line">    urllib.urlretrieve(<span class="string">'http://%s'</span> %i, <span class="string">'%s.%s'</span> %(n, i[<span class="number">-3</span>:]))</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[安装libevent开发库]]></title>
      <url>http://yoursite.com/2016/03/28/%E5%AE%89%E8%A3%85libevent%E5%BC%80%E5%8F%91%E5%BA%93/</url>
      <content type="html"><![CDATA[<p>为了稳定性，我选 <code>2.0.21-stable</code> 版本。在安装中注意要以<code>root</code>用户身份运行。<br><a id="more"></a></p>
<h3 id="1-下载源码包"><a href="#1-下载源码包" class="headerlink" title="1.下载源码包"></a>1.下载源码包</h3><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`<span class="javascript">https:<span class="comment">//codeload.github.com/nmathewson/Libevent/tar.gz/release-2.0.21-stable</span></span>`</span><br></pre></td></tr></table></figure>
<h3 id="2-解压"><a href="#2-解压" class="headerlink" title="2.解压"></a>2.解压</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">tar</span> <span class="selector-tag">-zxvf</span> <span class="selector-tag">Libevent-release-2</span><span class="selector-class">.0</span><span class="selector-class">.21-stable</span><span class="selector-class">.tar</span><span class="selector-class">.gz</span></span><br></pre></td></tr></table></figure>
<h3 id="3-配置安装路径"><a href="#3-配置安装路径" class="headerlink" title="3.配置安装路径"></a>3.配置安装路径</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd Libevent-<span class="built_in">release</span><span class="number">-2.0</span><span class="number">.21</span>-stable/</span><br><span class="line">./configure -prefix=/usr</span><br></pre></td></tr></table></figure>
<h3 id="4-编译并安装"><a href="#4-编译并安装" class="headerlink" title="4.编译并安装"></a>4.编译并安装</h3><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">make</span></span><br><span class="line"><span class="built_in">make</span> install</span><br></pre></td></tr></table></figure>
<h3 id="5-测试libevent是否安装成功"><a href="#5-测试libevent是否安装成功" class="headerlink" title="5.测试libevent是否安装成功"></a>5.测试libevent是否安装成功</h3><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#ls -al <span class="regexp">/usr/</span>lib | <span class="keyword">grep</span> libevent</span><br></pre></td></tr></table></figure>
<p><img src="http://7xsc1o.com1.z0.glb.clouddn.com/programerlibevent%E5%AE%89%E8%A3%85%E6%B5%8B%E8%AF%95.PNG" class="thumbnail"></p>
<h3 id="6-说明"><a href="#6-说明" class="headerlink" title="6.说明"></a>6.说明</h3><p>如果编译后的程序提示找不到libvent的so，则创建库的链接和缓存文件<code>ldconfig</code></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[开博——记录程序员的成长]]></title>
      <url>http://yoursite.com/2016/03/27/%E5%BC%80%E5%8D%9A%E2%80%94%E2%80%94%E8%AE%B0%E5%BD%95%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E6%88%90%E9%95%BF/</url>
      <content type="html"><![CDATA[<p>这是我开博的第一片博客，我久思冥想不知道该写些什么。人们对事情的开头总是寄托了自己美好的愿想，常言道“善始善终”，一个好的开头总是能给人看到希望，给人坚持走下去的动力。<br><a id="more"></a></p>
<p>人们眼中的程序员，往往是带着黑框眼镜、穿着蓝色牛仔、外加格子衬衫，整日埋头在电脑面前的，没有情感的‘机器’。只有程序员自己才能明白其实我们是有感情的，而且异常丰富。我们会为一个bug破口大骂，会为一个巧妙的算法惊呼，会为最终完成作品而感动流泪。程序员也是人，是充满感情的‘作家‘。</p>
<p>其实技术这条路，带来的不仅仅是技能上的提高，有时候更多的是给自己带来的成长，让自己更加稳重、成熟。越是在技术上钻研，越是发现机器下的世界和人们生活的世界是多么相似。人世间的纷纷扰扰在0和1的世界里同样存在，机器世界的制度规则在生活里同样上演。</p>
<p>以前自己的记录都写在本地上，虽然有过开博的想法，但总是因为各种各样的事情没有开成。可以说这次开博不容易。我希望在未来的日子了，将自己的技术领悟，人生随想都记录到这里，和大家一起学习，一起成长，共同见证一个程序员的岁月。</p>
]]></content>
    </entry>
    
  
  
</search>
